{
    "docs": [
        {
            "location": "/", 
            "text": ":imagesdir: images\n\n\nESP8266\n#\n\n\nESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.\n\n\n\u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.\n\n\nESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.\n\n\nHi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n \n S\u01a1 \u0111\u1ed3 kh\u1ed1i\n#\n\n\n.S\u01a1 \u0111\u1ed3 ch\u00e2n \n s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX\n\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#\n\n\n\n\n32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz\n\n\nH\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB\n\n\n64KBytes RAM th\u1ef1c thi l\u1ec7nh\n\n\n96KBytes RAM d\u1eef li\u1ec7u\n\n\n64KBytes boot ROM\n\n\nChu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz\n\n T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network\n\n H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network\n\n\nT\u00edch h\u1ee3p giao th\u1ee9c TCP/IP\n\n\nH\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten\n\n\n16 ch\u00e2n GPIO\n\n\nH\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA\n\n\n1 ADC 10-bit\n\n\nD\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C\n\n\n\n\nSDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng\n#\n\n\nT\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0: \nNONOS SDK\n v\u00e0 \nRTOS SDK\n. C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean \nNONOS SDK\n \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady \nNONOS SDK\n s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.\n\n\nESP8266 NONOS SDK\n#\n\n\nHi\u1ec7n nay, \nNONOS SDK\n phi\u00ean b\u1ea3n t\u1eeb \n2.0.0\n tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:\n\n\n\n\nC\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.\n\n\nSmartconfig\n: H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.\n\n\nSniffer\n API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.\n\n\nSNTP\n API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.\n\n\nWPA2 Enterprise\n API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.\n\n\nTCP/UDP\n API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.\n\n\nmDNS\n API: Gi\u00fap t\u00ecm ra \nIP\n c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).\n\n\nMESH\n API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH\n\n\nFOTA\n API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .\n\n\nESP-Now\n API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.\n\n\nSimple Pair\n API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.\n\n\n\n\nESP8266 RTOS SDK\n#\n\n\nRTOS SDK\n s\u1eed d\u1ee5ng \nFreeRTOS\n l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a \nNON OS\n SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi \nRTOS SDK\n.\n\n\nESP8285\n#\n\n\nESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#", 
            "title": "Gi\u1edbi thi\u1ec7u chung"
        }, 
        {
            "location": "/#esp8266", 
            "text": "ESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.  \u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.  ESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.  Hi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266", 
            "title": "ESP8266"
        }, 
        {
            "location": "/#so-o-chan-so-o-khoi", 
            "text": ".S\u01a1 \u0111\u1ed3 ch\u00e2n   s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX", 
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n &amp; S\u01a1 \u0111\u1ed3 kh\u1ed1i"
        }, 
        {
            "location": "/#thong-so-phan-cung", 
            "text": "32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz  H\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB  64KBytes RAM th\u1ef1c thi l\u1ec7nh  96KBytes RAM d\u1eef li\u1ec7u  64KBytes boot ROM  Chu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz  T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network  H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network  T\u00edch h\u1ee3p giao th\u1ee9c TCP/IP  H\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten  16 ch\u00e2n GPIO  H\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA  1 ADC 10-bit  D\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C", 
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        }, 
        {
            "location": "/#sdk-ho-tro-chinh-thuc-tu-hang", 
            "text": "T\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0:  NONOS SDK  v\u00e0  RTOS SDK . C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean  NONOS SDK  \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady  NONOS SDK  s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.", 
            "title": "SDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng"
        }, 
        {
            "location": "/#esp8266-nonos-sdk", 
            "text": "Hi\u1ec7n nay,  NONOS SDK  phi\u00ean b\u1ea3n t\u1eeb  2.0.0  tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:   C\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.  Smartconfig : H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.  Sniffer  API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.  SNTP  API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.  WPA2 Enterprise  API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.  TCP/UDP  API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.  mDNS  API: Gi\u00fap t\u00ecm ra  IP  c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).  MESH  API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH  FOTA  API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .  ESP-Now  API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.  Simple Pair  API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.", 
            "title": "ESP8266 NONOS SDK"
        }, 
        {
            "location": "/#esp8266-rtos-sdk", 
            "text": "RTOS SDK  s\u1eed d\u1ee5ng  FreeRTOS  l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a  NON OS  SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi  RTOS SDK .", 
            "title": "ESP8266 RTOS SDK"
        }, 
        {
            "location": "/#esp8285", 
            "text": "ESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.", 
            "title": "ESP8285"
        }, 
        {
            "location": "/#so-o-chan", 
            "text": "", 
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        }, 
        {
            "location": "/#thong-so-phan-cung_1", 
            "text": "", 
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        }, 
        {
            "location": "/00-introduction/", 
            "text": "Gi\u1edbi thi\u1ec7u\n#", 
            "title": "H\u01b0\u1edbng d\u1eabn b\u1eaft \u0111\u1ea7u & c\u00e0i \u0111\u1eb7t"
        }, 
        {
            "location": "/00-introduction/#gioi-thieu", 
            "text": "", 
            "title": "Gi\u1edbi thi\u1ec7u"
        }, 
        {
            "location": "/01-esp-basic/", 
            "text": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n#\n\n\nTr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7 \nTr\u00ecnh bi\u00ean d\u1ecbch\n, t\u1ea3i v\u1ec1 \nesptool.py\n v\u00e0 \nESP8266-NONOS-SDK\n nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t\n\n\nTrong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh \nC\n v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1 \nl\u1eadp tr\u00ecnh C\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-helloworld\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\n\n\nMakefile\n Gi\u00fap cho c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng\n\n\nmain.c\n Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh\n\n\nrf_init.c\n Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.\n\n\nuser_config.h\n Khi bi\u00ean d\u1ecbch, SDK s\u1ebd \ninclude\n file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.\n\n\n\n\nMakefile\n#\n\n\n#esp-helloworld/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo \nLD main.out\n\n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo \nAR main.o\n\n  $(AR) cru main.a main.\n\nmain.o:\n  @echo \nCC main.c \n rf_init.c\n\n  $(CC) $(CFLAGS) -c main.c -o main.o \n14\n\n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o \n14\n\n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash\n\n\n\n\nGi\u1ea3i th\u00edch Makefile nh\u01b0 sau:\n\n\n\n\nXTENSA\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng \n/tools/esp8266/compiler/xtensa-lx106-elf/bin/\n\n\nSDK_BASE\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nSDK\n, n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng \nC:\\Espressif\\ESP8266_NONOS_SDK\n\n\nESPTOOL\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nesptool.py\n, nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh \nchmod +x\n)\n\n\nSDK_LIBS\n C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi \nSDK\n, v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng \nsmartconfig\n th\u00ec th\u00eam v\u00e0o \n-lsmartconfig\n\n\nCC\n, \nAR\n, \nLD\n \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver\n\n\nLDFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Linker \n\n\nCFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Compiler\n\n\nC\u1edd \n-I.\n \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a \n#include\n) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include\n\n\nLD_SCRIPT\n Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a \nSDK\n cho chip ESP8266\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh khi g\u1ecdi \nmake\n hay \nmake all\n s\u1ebd g\u1ecdi \nall\n, nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi \nmain.bin\n\n\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake clean\n x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi \nmake all\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake flash\n \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho \n/dev/tty.SLAB_USBtoUART\n. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)\n\n\n\n\nQuan tr\u1ecdng\n#\n\n\n\n\nD\u1ea5u \n\\\n b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile\n\n\nTrong \nMakefile\n, lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i \nMakefile:35: *** missing separator.  Stop.\n\n\n\n\nC\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a \nMakefile basic\n. Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n \nC\n sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn\n\n\nrf_init.c\n#\n\n\n//esp-helloworld/rf_init.c\n#include \nstdio.h\n\n#include \nosapi.h\n\n#include \nuser_interface.h\n\n\nvoid __attribute__((weak)) user_rf_pre_init(void) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c SDK g\u1ecdi c\u1ea5u h\u00ecnh c\u00f4ng su\u1ea5t ph\u00e1t WiFi\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82); //c\u00f4ng su\u1ea5t truy\u1ec1n, Gi\u00e1 tr\u1ecb t\u1eeb 1-82\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void) \n{\n  enum flash_size_map size_map = system_get_flash_size_map();\n  uint32 rf_cal_sec = 0;\n\n  switch (size_map) {\n    case FLASH_SIZE_4M_MAP_256_256:\n      rf_cal_sec = 128 - 5;\n      break;\n\n    case FLASH_SIZE_8M_MAP_512_512:\n      rf_cal_sec = 256 - 5;\n      break;\n\n    case FLASH_SIZE_16M_MAP_512_512:\n    case FLASH_SIZE_16M_MAP_1024_1024:\n      rf_cal_sec = 512 - 5;\n      break;\n\n    case FLASH_SIZE_32M_MAP_512_512:\n    case FLASH_SIZE_32M_MAP_1024_1024:\n      rf_cal_sec = 1024 - 5;\n      break;\n\n    default:\n      rf_cal_sec = 0;\n      break;\n  }\n  return rf_cal_sec;\n}\n\n\n\n\nmain.c\n#\n\n\n#include \nstdio.h\n\n#include \nosapi.h\n\n#include \nuser_interface.h\n\n\nvoid app_init()\n{\n    os_printf(\nhello world\\r\\n\n);\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\nBi\u00ean d\u1ecbch\n#\n\n\nTh\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n\n\n\ncd esp-helloworld\nmake clean\nmake\nmake flash\n\n\n\n\nM\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:\n\n\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nM\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \n, MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:\n\n\n...\nhello world\nscandone", 
            "title": "ESP8266 C\u01a1 b\u1ea3n"
        }, 
        {
            "location": "/01-esp-basic/#bien-dich-du-an-au-tien", 
            "text": "Tr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7  Tr\u00ecnh bi\u00ean d\u1ecbch , t\u1ea3i v\u1ec1  esptool.py  v\u00e0  ESP8266-NONOS-SDK  nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t  Trong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh  C  v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1  l\u1eadp tr\u00ecnh C", 
            "title": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean"
        }, 
        {
            "location": "/01-esp-basic/#so-o-file", 
            "text": "esp-helloworld\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h   Makefile  Gi\u00fap cho c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng  main.c  Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh  rf_init.c  Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.  user_config.h  Khi bi\u00ean d\u1ecbch, SDK s\u1ebd  include  file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.", 
            "title": "S\u01a1 \u0111\u1ed3 file"
        }, 
        {
            "location": "/01-esp-basic/#makefile", 
            "text": "#esp-helloworld/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo  LD main.out \n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo  AR main.o \n  $(AR) cru main.a main.\n\nmain.o:\n  @echo  CC main.c   rf_init.c \n  $(CC) $(CFLAGS) -c main.c -o main.o  14 \n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o  14 \n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash  Gi\u1ea3i th\u00edch Makefile nh\u01b0 sau:   XTENSA  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng  /tools/esp8266/compiler/xtensa-lx106-elf/bin/  SDK_BASE  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  SDK , n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng  C:\\Espressif\\ESP8266_NONOS_SDK  ESPTOOL  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  esptool.py , nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh  chmod +x )  SDK_LIBS  C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi  SDK , v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng  smartconfig  th\u00ec th\u00eam v\u00e0o  -lsmartconfig  CC ,  AR ,  LD  \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver  LDFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Linker   CFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Compiler  C\u1edd  -I.  \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a  #include ) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include  LD_SCRIPT  Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a  SDK  cho chip ESP8266   M\u1eb7c \u0111\u1ecbnh khi g\u1ecdi  make  hay  make all  s\u1ebd g\u1ecdi  all , nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi  main.bin    Th\u1ef1c hi\u1ec7n  make clean  x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi  make all   Th\u1ef1c hi\u1ec7n  make flash  \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho  /dev/tty.SLAB_USBtoUART . B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)", 
            "title": "Makefile"
        }, 
        {
            "location": "/01-esp-basic/#quan-trong", 
            "text": "D\u1ea5u  \\  b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile  Trong  Makefile , lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i  Makefile:35: *** missing separator.  Stop.   C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a  Makefile basic . Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n  C  sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn", 
            "title": "Quan tr\u1ecdng"
        }, 
        {
            "location": "/01-esp-basic/#rf_initc", 
            "text": "//esp-helloworld/rf_init.c\n#include  stdio.h \n#include  osapi.h \n#include  user_interface.h \n\nvoid __attribute__((weak)) user_rf_pre_init(void) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c SDK g\u1ecdi c\u1ea5u h\u00ecnh c\u00f4ng su\u1ea5t ph\u00e1t WiFi\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82); //c\u00f4ng su\u1ea5t truy\u1ec1n, Gi\u00e1 tr\u1ecb t\u1eeb 1-82\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void) \n{\n  enum flash_size_map size_map = system_get_flash_size_map();\n  uint32 rf_cal_sec = 0;\n\n  switch (size_map) {\n    case FLASH_SIZE_4M_MAP_256_256:\n      rf_cal_sec = 128 - 5;\n      break;\n\n    case FLASH_SIZE_8M_MAP_512_512:\n      rf_cal_sec = 256 - 5;\n      break;\n\n    case FLASH_SIZE_16M_MAP_512_512:\n    case FLASH_SIZE_16M_MAP_1024_1024:\n      rf_cal_sec = 512 - 5;\n      break;\n\n    case FLASH_SIZE_32M_MAP_512_512:\n    case FLASH_SIZE_32M_MAP_1024_1024:\n      rf_cal_sec = 1024 - 5;\n      break;\n\n    default:\n      rf_cal_sec = 0;\n      break;\n  }\n  return rf_cal_sec;\n}", 
            "title": "rf_init.c"
        }, 
        {
            "location": "/01-esp-basic/#mainc", 
            "text": "#include  stdio.h \n#include  osapi.h \n#include  user_interface.h \n\nvoid app_init()\n{\n    os_printf( hello world\\r\\n );\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}", 
            "title": "main.c"
        }, 
        {
            "location": "/01-esp-basic/#bien-dich", 
            "text": "Th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n  cd esp-helloworld\nmake clean\nmake\nmake flash  M\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:  esptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...", 
            "title": "Bi\u00ean d\u1ecbch"
        }, 
        {
            "location": "/01-esp-basic/#ket-qua", 
            "text": "M\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng  , MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:  ...\nhello world\nscandone", 
            "title": "K\u1ebft qu\u1ea3"
        }, 
        {
            "location": "/02-esp-led/", 
            "text": "B\u1eadt t\u1eaft LED\n#\n\n\nT\u01b0\u01a1ng t\u1ef1 nh\u01b0 vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu trong ph\u1ea7n tr\u01b0\u1edbc, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. M\u1ee5c \u0111\u00edch: Ch\u1edbp t\u1eaft \u0111\u00e8n LED m\u1ed7i 1 gi\u00e2y.\n\n\n//esp-led/main.c\n#include \nstdio.h\n\n#include \nosapi.h\n\n#include \nuser_interface.h\n\nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) \n (uint32_t)0xfffffffe)| (uint32_t)(led_value \n 1)); //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    os_printf(\nBlink\\r\\n\n);\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) \n 0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) \n (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) \n (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn(\nled_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm(\nled_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\n\u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:\n\n\n\n\n\u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a: \nWRITE_PERI_REG\n v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a \nREAD_PERI_REG\n ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.\n\n\nTr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0 \nos_timer_t led_timer\n, kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi \nos_timer_setfn\n v\u00e0 \nos_timer_arm\n v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.\n\n\n\n\nG\u1ee3i \u00fd\n#\n\n\nC\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK \n$SDK_BASE\\include\\eagle_soc.h\n. Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i \n$SDK_BASE\\driver_lib\\gpio16.c\n \n\n\nC\u1ea3nh b\u00e1o\n#\n\n\nCh\u00e2n \nGPIO16\n c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n \n32\n c\u1ee7a ESP8266)", 
            "title": "B\u1eadt t\u1eaft LED"
        }, 
        {
            "location": "/02-esp-led/#bat-tat-led", 
            "text": "T\u01b0\u01a1ng t\u1ef1 nh\u01b0 vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu trong ph\u1ea7n tr\u01b0\u1edbc, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c . M\u1ee5c \u0111\u00edch: Ch\u1edbp t\u1eaft \u0111\u00e8n LED m\u1ed7i 1 gi\u00e2y.  //esp-led/main.c\n#include  stdio.h \n#include  osapi.h \n#include  user_interface.h \nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT)   (uint32_t)0xfffffffe)| (uint32_t)(led_value   1)); //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    os_printf( Blink\\r\\n );\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF)   0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF)   (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE)   (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn( led_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm( led_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}  \u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:   \u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a:  WRITE_PERI_REG  v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a  READ_PERI_REG  ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.  Tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0  os_timer_t led_timer , kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi  os_timer_setfn  v\u00e0  os_timer_arm  v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.", 
            "title": "B\u1eadt t\u1eaft LED"
        }, 
        {
            "location": "/02-esp-led/#goi-y", 
            "text": "C\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK  $SDK_BASE\\include\\eagle_soc.h . Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i  $SDK_BASE\\driver_lib\\gpio16.c", 
            "title": "G\u1ee3i \u00fd"
        }, 
        {
            "location": "/02-esp-led/#canh-bao", 
            "text": "Ch\u00e2n  GPIO16  c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n  32  c\u1ee7a ESP8266)", 
            "title": "C\u1ea3nh b\u00e1o"
        }
    ]
}